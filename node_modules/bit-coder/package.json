{
  "name": "bit-coder",
  "version": "0.1.0",
  "description": "bitwise binary coding",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jhs67/bitcoder.git"
  },
  "keywords": [
    "binary",
    "universal",
    "code",
    "bit"
  ],
  "devDependencies": {
    "mocha": ">=1.9"
  },
  "author": {
    "name": "Jon Spencer",
    "email": "jon@jonspencer.ca"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jhs67/bitcoder/issues"
  },
  "readme": "bit-coder\n=========\n\nA node.js library for bitwise binary encoding of data\n\n## Usage\n\n```javascript\nvar assert = require('assert');\nvar bitCoder = require('bit-coder');\n\n// 1000 bits to write to.\nvar wbs = new bitCoder.BitStream(1000);\n\n// Write out some values.\nwbs.writeBits(100, 20);\nwbs.writeUnary(20);\nwbs.writeEliasGamma(2000);\n\n// Pad and get the result\nvar buf = wbs.wrap();\n\n// Get a new bitstream removing the padding\nvar rbs = bitCoder.BitStream.unwrap(buf);\n\n// Check the contents.\nassert.equal(rbs.readBits(20), 100);\nassert.equal(rbs.readUnary(), 20);\nassert.equal(rbs.readEliasGamma(), 2000);\n```\n\n## API\n\n### BitStream\n### `new bitCoder.BitStream(len)`\nConstruct a new BitStream backed by a new `BitBuffer` len bits.\n\n### `new bitCoder.BitStream(bitbuf)`\nConstruct a new BitStream backed by an existing `BitBuffer`.\n\n### `new bitCoder.BitStream(buf, len)`\nConstruct a new BitStream backed by an new `BitBuffer`\nconstructed from the existing buffer and optional length.\n\n### `bitCoder.Bitstream.unwrap(buf)`\nConstruct a new `BitStream` from of buffer previously obtained\nfrom calling `wrap`. This is a Function method, not a prototype method.\n\n### `BitStream.index`\nThe current read/write pointer; change this to seek.\n\n### `BitStream.view`\nThe underling `BitBuffer`.\n\n### `BitStream.wrap()`\nPad a bit stream with 1 to 8 bits to the nearest byte boundary and return\nthe slice of the underling `Buffer` that was written.\n\n### `Bitstream.readBits(len)`\nRead len bits (32 maximum) from the stream.\n\n### `Bitstream.writeBits(offset, len)`\nWrite len (32 maximum) to the stream.\n\n### `Bitstream.fillBits(offset, v, len)`\nWrite len bits with the lowest bit of v.\n\n### `BitStream.writeUnary(v)`\nWrite out the given value (v >= 1) in unary encoding\n\n### `BitStream.readUnary()`\nRead a unary encoded value from the stream\n\n### `BitStream.writeEliasGamma/writeEliasDelta/writeEliasOmega/writeFibonacci(v)`\nWrite out the given value (v >= 1) in the indicated universal code\n\n### `BitStream.readEliasGamma/readEliasDelta/readEliasOmega/readFibonacci()`\nRead a value encoded with the indicated universal code\n\n### `BitStream.writeTruncateBinary(v, n)`\nWrite out the value v (0 <= v < n) in base n truncated binary representation\n\n### `BitStream.readTruncateBinary(n)`\nRead a base n truncated binary value from the stream\n\n### BitBuffer\n### `new bitCoder.BitBuffer(len)`\nConstruct a new BitBuffer len bits long backed by a `Buffer` on\nnode.js or a `Uint8Array` in the browser.\n\n### `new bitCoder.BitBuffer(buffer, len)`\nConstruct a new BitBuffer backed by the supplied `Buffer` or `Uint8Array`.\nThe length is specified by the optional len, which is all the bits in\nthe buffer if unspecified.\n\n### `BitBuffer.getBits(offset, len)`\nRetreive len bits (32 maximum) from the buffer at the supplied offset.\n\n### `BitBuffer.setBits(offset, len)`\nSet len (32 maximum) to the buffer at the supplied offset.\n\n### `BitBuffer.fillBits(offset, v, len)`\nFill len bits with the lowest bit of v at the supplied offset.\n\n\n## License\n\n  MIT\n",
  "readmeFilename": "README.md",
  "_id": "bit-coder@0.1.0",
  "dist": {
    "shasum": "9558a072a10025c7046dff9215a8567f1848ed64",
    "tarball": "http://registry.npmjs.org/bit-coder/-/bit-coder-0.1.0.tgz"
  },
  "_from": "bit-coder@",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "jhs67",
    "email": "jon@jonspencer.ca"
  },
  "maintainers": [
    {
      "name": "jhs67",
      "email": "jon@jonspencer.ca"
    }
  ],
  "directories": {},
  "_shasum": "9558a072a10025c7046dff9215a8567f1848ed64",
  "_resolved": "https://registry.npmjs.org/bit-coder/-/bit-coder-0.1.0.tgz"
}
