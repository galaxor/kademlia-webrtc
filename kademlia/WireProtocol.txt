Here is what is going on:

I have written the FIND_NODE primitive, but I have not defined any network interactions (even mock ones).

So now, I need to define the network interactions.

Here's the plan:

Each KademliaRemoteNode has a KademliaDHT backing it.  In real life, the KademliaDHT will be on the other side of the network and will communicate via WebRTC.

Let's say we have two KademliaDHT's -- Alice and Bob.

Alice has a KademliaRemoteNode that refers to Bob.  Bob has a KademliaRemoteNode that refers to Alice.

Alice wants to send a FIND_NODE to Bob.  So she finds the KademliaRemoteNode corresponding to Bob and calls sendFindNodePrimitive.  This will do the network communication to send {"op":"FIND_NODE", "key":<hex representation of key>, "offers":[k offers]}.

From Bob's perspective, what happens is this:

The KademliaRemoteNode corresponding to Alice got the thing over the network and responds by calling recvFindNodePrimitive on its parent KademliaDHT (Bob).  The KademliaDHT that is Bob rustles up k nodes and sends one of the offers to each one of the nodes.  It collects the answers and returns them to the KademliaRemoteNode corresponding to Alice.  The KademliaRemoteNode sends the answers back over the wire.

We also have to ship ICE candidates around!!

To turn this into a wire protocol:

Alice sends Bob
{"op":"FIND_NODE", "key":<hex representation of key Alice is searching for>, "serial":<a serial number>, "offers":[k offers]}

Bob finds a node (say Craig), and sends Craig
{"op":"offer", "from":<hex representation of Alice's id>, "offer":<offer>, "serial":<the serial number that Alice sent>, "idx":<a number>}

The "idx" number is the array index from the original "offers" array.  So the first offer will be sent with idx=0, the second with idx=1, etc.  This is so that the sender can figure out which answers belong to which of the peers that were created.  Combined with the searchKey, this uniquely identifies a peer.

Craig sends Bob
{"op":"answer", "to":<hex rep of Alice's key>, "from":<hex representation of Craig's key>, "answer":<answer>, "serial":<the serial number Alice sent>, "idx":<idx>}
The idx number is repeated from above.
and may also send some number of
{"op":"ICECandidate", "from":<hex rep of Craig's key>, "to":<hex rep of Alice's key>, "candidate":<whatever the ICE candidate thing is>, "serial":<the serial number Alice sent>, "idx":<idx>}

Bob sends Alice
{"op":"FOUND_NODE", "key":<hex representation of key that was originally requested>, "serial":<the original serial number Alice sent>, "answers":[{"key":<hex rep of Craig's key>, "idx":<idx>, "answer":<answer>}]}
and may also relay those ICE candidate msgs.

Alice sends Bob
{"op":"ICECandidate", "from":<hex rep of Alice's key>, "to":<hex rep of Craig's key>, "candidate":<whatever the ICE candidate thing is>}

These ICE candidate messages don't need to have a (serial, idx) because by this point, Alice and Craig can identify each other by their keys.

Bob relays those to Craig.

Communication is established!

After communication is established, Alice and Craig may find better ICE candidates.  They can send them directly to each other.  They will look like this:
{"op":"ICECandidate", "from":<hex rep of Alice's key>, "to":<hex rep of Craig's key>, "candidate":<whatever the ICE candidate thing is>}
